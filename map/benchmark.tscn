[gd_scene load_steps=2 format=3 uid="uid://cthgwc0kimbfh"]

[sub_resource type="GDScript" id="GDScript_sao5h"]
script/source = "extends Node3D

var j_instance_vtx = \"res://skena/objek/pohon_besar_1_lod_vertex.scn\"
var j_instance_spt = \"res://skena/objek/pohon_besar_1_lod_sprite.scn\"

var jalur_instance = j_instance_vtx
var hasil_benchmark : Dictionary

func _ready():
	spawn_instance(Vector3.ZERO)
	jalur_instance = j_instance_spt
	spawn_instance(Vector3.ZERO)
	await get_tree().create_timer(3).timeout
	server.hapus_objek(server.permainan.dunia.get_node(\"objek/objek_1\").get_path())
	server.hapus_objek(server.permainan.dunia.get_node(\"objek/objek_2\").get_path())
	hasil_benchmark[\"vertex\"] = []
	hasil_benchmark[\"sprite\"] = []
func _input(event):
	if Input.is_key_pressed(KEY_F5):
		simpan_hasil_benchmark()
	elif Input.is_key_pressed(KEY_F6):
		mulai_benchmark(1)
	elif Input.is_key_pressed(KEY_F7):
		mulai_benchmark(2)

func hasilkan_instance():
	var y = 5
	for z in 5:
		for x in 5:
			spawn_instance(Vector3((x + 1) * 10, y, (z + 1) * 10))
			spawn_instance(Vector3((x + 1) * -10, y, (z + 1) * 10))
		spawn_instance(Vector3(0, y, (z + 1) * 10))
		for x in 5:
			spawn_instance(Vector3((x + 1) * 10, y, (z + 1) * -10))
			spawn_instance(Vector3((x + 1) * -10, y, (z + 1) * -10))
		spawn_instance(Vector3(0, y, (z + 1) * -10))
	for x in 5:
		spawn_instance(Vector3((x + 1) * 10, y, 0))
		spawn_instance(Vector3((x + 1) * -10, y, 0))
	spawn_instance(Vector3(0, y, 0))
func spawn_instance(posisi : Vector3):
	server._tambahkan_objek(
		jalur_instance,
		Vector3(
			posisi.x,
			posisi.y,
			posisi.z - 25
		),
		Vector3.ZERO,
		250,
		[]
	)

func mulai_benchmark(mode = 1):
	if mode == 1:	jalur_instance = j_instance_vtx;	hasil_benchmark[\"vertex\"] = []
	elif mode == 2:	jalur_instance = j_instance_spt;	hasil_benchmark[\"sprite\"] = []
	else:			return
	hasilkan_instance()
	await get_tree().create_timer(8).timeout
	var hasil = [
		str(RenderingServer.get_rendering_info(RenderingServer.RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME)),
		str(server.permainan.get_node(\"pengamat/viewport_utama/viewport\").get_render_info(Viewport.RENDER_INFO_TYPE_VISIBLE, Viewport.RENDER_INFO_PRIMITIVES_IN_FRAME)),
		String.humanize_size(OS.get_static_memory_usage()+OS.get_static_memory_peak_usage()),
		String.humanize_size(RenderingServer.get_rendering_info(RenderingServer.RENDERING_INFO_VIDEO_MEM_USED)),
		str(Engine.get_frames_per_second())
	]
	Panku.notify(str(Engine.get_frames_per_second())+\" fps\")
	if mode == 1:	hasil_benchmark[\"vertex\"].append(hasil)
	if mode == 2:	hasil_benchmark[\"sprite\"].append(hasil)
	for fp in 9:
		await get_tree().create_timer(2).timeout
		hasil = [
			str(RenderingServer.get_rendering_info(RenderingServer.RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME)),
			str(server.permainan.get_node(\"pengamat/viewport_utama/viewport\").get_render_info(Viewport.RENDER_INFO_TYPE_VISIBLE, Viewport.RENDER_INFO_PRIMITIVES_IN_FRAME)),
			String.humanize_size(OS.get_static_memory_usage()+OS.get_static_memory_peak_usage()),
			String.humanize_size(RenderingServer.get_rendering_info(RenderingServer.RENDERING_INFO_VIDEO_MEM_USED)),
			str(Engine.get_frames_per_second())
		]
		Panku.notify(str(Engine.get_frames_per_second())+\" fps\")
		if mode == 1:	hasil_benchmark[\"vertex\"].append(hasil)
		if mode == 2:	hasil_benchmark[\"sprite\"].append(hasil)
	for _objek in server.permainan.dunia.get_node(\"objek\").get_children():
		server.hapus_objek(_objek.get_path())
func simpan_hasil_benchmark():
	if hasil_benchmark[\"vertex\"].size() == 10 and \\
		hasil_benchmark[\"sprite\"].size() == 10:
		var file_simpan = FileAccess.open(\"user://hasil_uji_performa.csv\", FileAccess.WRITE)
		var format_hasil : PackedStringArray
		# draw			|	vert	|	mem		| vram	|	fps
		# vertex, sprite
		file_simpan.store_csv_line(
			[
				\"draw\", \" \", \" \",
				\"vert\", \" \", \" \",
				\"smem\", \" \", \" \",
				\"vram\", \" \", \" \",
				\"^fps\", \" \", \" \"
			]
		)
		file_simpan.store_csv_line(
			[
				\"vertex\", \"sprite\", \" \",
				\"vertex\", \"sprite\", \" \",
				\"vertex\", \"sprite\", \" \",
				\"vertex\", \"sprite\", \" \",
				\"vertex\", \"sprite\", \" \"
			]
		)
		for data in 10:
			var cek_vtx = hasil_benchmark[\"vertex\"][data]
			var cek_spt = hasil_benchmark[\"sprite\"][data]
			file_simpan.store_csv_line(
				[
					cek_vtx[0], cek_spt[0], \" \",
					cek_vtx[1], cek_spt[1], \" \",
					cek_vtx[2], cek_spt[2], \" \",
					cek_vtx[3], cek_spt[3], \" \",
					cek_vtx[4], cek_spt[4]
				]
			)
		file_simpan.store_csv_line(format_hasil)
		file_simpan.close()
		hasil_benchmark.clear()
		Panku.notify(\"data telah tersimpan ke /hasil_uji_performa.csv\")
	else:
		Panku.notify(\"data kosong!\")
"

[node name="lingkungan" type="Node3D"]

[node name="uji_performa" type="Node3D" parent="."]
script = SubResource("GDScript_sao5h")

[node name="Control" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Label" type="Label" parent="Control"]
layout_mode = 0
offset_left = 8.0
offset_top = 184.0
offset_right = 98.0
offset_bottom = 259.0
text = "F6 - Vertex
F7 - Sprite
F5 - Simpan"
